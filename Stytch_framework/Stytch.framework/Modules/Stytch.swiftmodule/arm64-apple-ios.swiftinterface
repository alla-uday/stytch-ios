// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Stytch
import Foundation
@_exported import Stytch
import Swift
import UIKit
import WebKit
@objc(StytchMagicLinkDelegate) public protocol StytchMagicLinkDelegate {
  @objc optional func onSuccess(_ result: Stytch.StytchResult)
  @objc optional func onFailure(_ error: Stytch.StytchError)
  @objc optional func onMagicLinkSent(_ email: Swift.String)
  @objc optional func onDeepLinkHandled()
  @objc optional func onEvent(_ event: Stytch.StytchEvent)
}
@objc(StytchEnvironment) public enum StytchEnvironment : Swift.Int {
  case test
  case live
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SAStytchMagicLink) public class StytchMagicLink : ObjectiveC.NSObject {
  @objc public var environment: Stytch.StytchEnvironment
  @objc public var createUserAsPending: Swift.Bool
  @objc public var debug: Swift.Bool
  @objc public func configure(projectID: Swift.String, scheme: Swift.String, host: Swift.String)
  @objc public func configure(projectID: Swift.String, universalLink: Foundation.URL)
  @objc public func loginOrCreate(email: Swift.String, success: @escaping (Swift.String) -> (), failure: @escaping (Stytch.StytchError) -> ())
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(StytchUICustomization) public class StytchUICustomization : ObjectiveC.NSObject {
  @objc final public let titleStyle: Stytch.StytchTextStyle
  @objc public var showTitle: Swift.Bool
  @objc final public let subtitleStyle: Stytch.StytchTextStyle
  @objc public var showSubtitle: Swift.Bool
  @objc final public let inputTextStyle: Stytch.StytchTextStyle
  @objc final public let inputPlaceholderStyle: Stytch.StytchTextStyle
  @objc public var inputBackgroundColor: UIKit.UIColor
  @objc public var inputBorderColor: UIKit.UIColor
  @objc public var inputCornerRadius: CoreGraphics.CGFloat
  @objc final public let buttonTextStyle: Stytch.StytchTextStyle
  @objc public var buttonBackgroundColor: UIKit.UIColor
  @objc public var buttonCornerRadius: CoreGraphics.CGFloat
  @objc public var showBrandLogo: Swift.Bool
  @objc public var backgroundColor: UIKit.UIColor
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(StytchTextStyle) public class StytchTextStyle : ObjectiveC.NSObject {
  @objc public var font: UIKit.UIFont
  @objc public var size: CoreGraphics.CGFloat
  @objc public var color: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc public class SMSModel : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SAStytch) public class Stytch : ObjectiveC.NSObject {
  @objc public static var shared: Stytch.Stytch
  @objc final public let magicLink: Stytch.StytchMagicLink
  @objc final public let otp: Stytch.StytchOTP
  @objc public var environment: Stytch.StytchEnvironment {
    @objc get
    @objc set(value)
  }
  @objc public var debug: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var createUserAsPending: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public func configure(projectID: Swift.String, scheme: Swift.String, host: Swift.String)
  @objc public func configure(projectID: Swift.String, universalLink: Foundation.URL)
  @objc public func configure(projectID: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(StytchSMSUI) public class StytchSMSUI : ObjectiveC.NSObject {
  @objc public static var shared: Stytch.StytchSMSUI
  @objc weak public var delegate: Stytch.StytchSMSUIDelegate?
  @objc final public let customization: Stytch.StytchUICustomization
  @objc public func loginViewController() -> UIKit.UIViewController
  @objc deinit
}
@objc(StytchSMSUIDelegate) public protocol StytchSMSUIDelegate {
  @objc optional func onSuccess(_ result: Stytch.StytchResult)
  @objc optional func onFailure(_ error: Stytch.StytchError)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(StytchMagicLinkUI) public class StytchMagicLinkUI : ObjectiveC.NSObject {
  @objc public static var shared: Stytch.StytchMagicLinkUI
  @objc final public let customization: Stytch.StytchUICustomization
  @objc public func loginViewController() -> UIKit.UIViewController
  @objc deinit
}
@objc(StytchLoginResult) public enum StytchLoginResult : Swift.Int {
  case userCreated
  case userFound
  case error
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(StytchError) public enum StytchError : Swift.Int {
  case unknown
  case invalidEmail
  case invalidPhoneNumber
  case connection
  case invalidMagicToken
  case invalidConfiguration
  case missingDeveloperDependency
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension URLRequest {
  public var curlString: Swift.String {
    get
  }
}
@objc public class AuthenticatedOTPResponse : ObjectiveC.NSObject, Swift.Codable {
  public init(userId: Swift.String, requestId: Swift.String, methodId: Swift.String)
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(SAStytchOTPAuthenticator) public protocol StytchOTPAuthenticator {
  @objc func authenticateOTP(_ code: Swift.String, methodId: Swift.String, success: @escaping (Stytch.AuthenticatedOTPResponse) -> (), failure: @escaping (Stytch.StytchError) -> ())
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SAStytchOTP) public class StytchOTP : ObjectiveC.NSObject {
  @objc public var environment: Stytch.StytchEnvironment
  @objc public var createUserAsPending: Swift.Bool
  @objc public var debug: Swift.Bool
  @objc public var otpAuthenticator: Stytch.StytchOTPAuthenticator?
  @objc public static var codeLength: Swift.Int
  @objc public func configure(projectID: Swift.String)
  @objc public func loginOrCreateUserBySMS(phoneNumber: Swift.String, expirationTime: Swift.Int = 2, createUserAsPending: Swift.Bool, success: @escaping (Stytch.SMSModel) -> (), failure: @escaping (Stytch.StytchError) -> ())
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(StytchEvent) public class StytchEvent : ObjectiveC.NSObject {
  @objc public var type: Swift.String
  @objc public var created: Swift.Bool
  @objc public var userId: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(StytchResult) public class StytchResult : ObjectiveC.NSObject {
  @objc public var userId: Swift.String
  @objc public var requestId: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
